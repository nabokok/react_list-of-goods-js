{"version":3,"sources":["App.jsx","index.jsx"],"names":["goodsFromServer","SORT_FIELD_ALPH","SORT_FIELD_LENGTH","REVERSE","initialState","field","order","App","useState","sortField","setSortField","visibleGoods","goods","preparedGoods","sort","good1","good2","localeCompare","length","reverse","getSortedGoods","isShowReset","className","type","cn","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"wPAKaA,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGIC,EAAkB,iBAClBC,EAAoB,SACpBC,EAAU,UA2BhB,IAAMC,EAAe,CAAEC,MAAO,GAAIC,MAAO,IAE5BC,EAAM,WACjB,MAAkCC,mBAASJ,GAA3C,mBAAOK,EAAP,KAAkBC,EAAlB,KACMC,EA7BR,SAAwBC,EAAOH,GAC7B,IAAMI,EAAa,YAAOD,GAqB1B,OAnBIH,EAAUJ,OACZQ,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQP,EAAUJ,OAChB,KAAKJ,EACH,OAAOc,EAAME,cAAcD,GAE7B,KAAKd,EACH,OAAOa,EAAMG,OAASF,EAAME,OAE9B,QACE,OAAO,MAKXT,EAAUH,OACZO,EAAcM,UAGTN,EAOcO,CAAepB,EAAiBS,GAC/CY,EAAcZ,EAAUJ,OAASI,EAAUH,MAYjD,OACE,sBAAKgB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAG,iBAAkB,CAC9B,WAAYf,EAAUJ,QAAUJ,IAElCwB,QAAS,kBAAMf,EAAa,2BAAKD,GAAN,IAAiBJ,MAAOJ,MALrD,iCAUA,wBACEsB,KAAK,SACLD,UAAWE,IAAG,oBAAqB,CACjC,WAAYf,EAAUJ,QAAUH,IAElCuB,QAAS,WACPf,EAAa,2BAAKD,GAAN,IAAiBJ,MAAOH,MANxC,4BAYA,wBACEqB,KAAK,SACLD,UAAWE,IAAG,oBAAqB,CACjC,WAAYf,EAAUH,QAAUH,IAElCsB,QAxCc,WAChBhB,EAAUH,MACZI,EAAa,2BAAKD,GAAN,IAAiBH,MAAO,MAKtCI,EAAa,2BAAKD,GAAN,IAAiBH,MAAOH,MA4BhC,qBAUCkB,GACC,wBACEE,KAAK,SACLD,UAAU,4BACVG,QAAS,kBAAMf,EAAaN,IAH9B,sBAUJ,6BACGO,EAAae,KAAI,SAAAC,GAAI,OACpB,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,YC7GlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.9179e93e.chunk.js","sourcesContent":["import { useState } from 'react';\nimport cn from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nconst SORT_FIELD_ALPH = 'alphabetically';\nconst SORT_FIELD_LENGTH = 'length';\nconst REVERSE = 'reverse';\n\nfunction getSortedGoods(goods, sortField) {\n  const preparedGoods = [...goods];\n\n  if (sortField.field) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortField.field) {\n        case SORT_FIELD_ALPH:\n          return good1.localeCompare(good2);\n\n        case SORT_FIELD_LENGTH:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (sortField.order) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nconst initialState = { field: '', order: '' };\n\nexport const App = () => {\n  const [sortField, setSortField] = useState(initialState);\n  const visibleGoods = getSortedGoods(goodsFromServer, sortField);\n  const isShowReset = sortField.field || sortField.order;\n\n  const handleReverse = () => {\n    if (sortField.order) {\n      setSortField({ ...sortField, order: '' });\n\n      return;\n    }\n\n    setSortField({ ...sortField, order: REVERSE });\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn('button is-info', {\n            'is-light': sortField.field !== SORT_FIELD_ALPH,\n          })}\n          onClick={() => setSortField({ ...sortField, field: SORT_FIELD_ALPH })}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-success', {\n            'is-light': sortField.field !== SORT_FIELD_LENGTH,\n          })}\n          onClick={() => {\n            setSortField({ ...sortField, field: SORT_FIELD_LENGTH });\n          }}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-warning', {\n            'is-light': sortField.order !== REVERSE,\n          })}\n          onClick={handleReverse}\n        >\n          Reverse\n        </button>\n\n        {isShowReset && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => setSortField(initialState)}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li data-cy=\"Good\" key={good}>{good}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}